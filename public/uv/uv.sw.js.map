{
  "version": 3,
  "sources": ["../src/uv.sw.js"],
  "sourcesContent": ["/*globals __uv$config*/\n// Users must import the config (and bundle) prior to importing uv.sw.js\n// This is to allow us to produce a generic bundle with no hard-coded paths.\n\n/**\n * @type {import('../uv').UltravioletCtor}\n */\nconst Ultraviolet = self.Ultraviolet;\n\nconst cspHeaders = [\n    'cross-origin-embedder-policy',\n    'cross-origin-opener-policy',\n    'cross-origin-resource-policy',\n    'content-security-policy',\n    'content-security-policy-report-only',\n    'expect-ct',\n    'feature-policy',\n    'origin-isolation',\n    'strict-transport-security',\n    'upgrade-insecure-requests',\n    'x-content-type-options',\n    'x-download-options',\n    'x-frame-options',\n    'x-permitted-cross-domain-policies',\n    'x-powered-by',\n    'x-xss-protection',\n];\nconst emptyMethods = ['GET', 'HEAD'];\n\nclass UVServiceWorker extends Ultraviolet.EventEmitter {\n    constructor(config = __uv$config) {\n        super();\n        if (!config.bare) config.bare = '/bare/';\n        if (!config.prefix) config.prefix = '/service/';\n        this.config = config;\n        const addresses = (\n            Array.isArray(config.bare) ? config.bare : [config.bare]\n        ).map((str) => new URL(str, location).toString());\n        this.address = addresses[~~(Math.random() * addresses.length)];\n        /**\n         * @type {InstanceType<Ultraviolet['BareClient']>}\n         */\n        this.bareClient = new Ultraviolet.BareClient(this.address);\n    }\n    /**\n     *\n     * @param {Event & {request: Request}} param0\n     * @returns\n     */\n    async fetch({ request }) {\n        /**\n         * @type {string|void}\n         */\n        let fetchedURL;\n\n        try {\n            if (!request.url.startsWith(location.origin + this.config.prefix))\n                return await fetch(request);\n\n            const ultraviolet = new Ultraviolet(this.config, this.address);\n\n            if (typeof this.config.construct === 'function') {\n                this.config.construct(ultraviolet, 'service');\n            }\n\n            const db = await ultraviolet.cookie.db();\n\n            ultraviolet.meta.origin = location.origin;\n            ultraviolet.meta.base = ultraviolet.meta.url = new URL(\n                ultraviolet.sourceUrl(request.url)\n            );\n\n            const requestCtx = new RequestContext(\n                request,\n                this,\n                ultraviolet,\n                !emptyMethods.includes(request.method.toUpperCase())\n                    ? await request.blob()\n                    : null\n            );\n\n            if (ultraviolet.meta.url.protocol === 'blob:') {\n                requestCtx.blob = true;\n                requestCtx.base = requestCtx.url = new URL(\n                    requestCtx.url.pathname\n                );\n            }\n\n            if (\n                request.referrer &&\n                request.referrer.startsWith(location.origin)\n            ) {\n                const referer = new URL(\n                    ultraviolet.sourceUrl(request.referrer)\n                );\n\n                if (\n                    requestCtx.headers.origin ||\n                    (ultraviolet.meta.url.origin !== referer.origin &&\n                        request.mode === 'cors')\n                ) {\n                    requestCtx.headers.origin = referer.origin;\n                }\n\n                requestCtx.headers.referer = referer.href;\n            }\n\n            const cookies = (await ultraviolet.cookie.getCookies(db)) || [];\n            const cookieStr = ultraviolet.cookie.serialize(\n                cookies,\n                ultraviolet.meta,\n                false\n            );\n\n            requestCtx.headers['user-agent'] = navigator.userAgent;\n\n            if (cookieStr) requestCtx.headers.cookie = cookieStr;\n\n            const reqEvent = new HookEvent(requestCtx, null, null);\n            this.emit('request', reqEvent);\n\n            if (reqEvent.intercepted) return reqEvent.returnValue;\n\n            fetchedURL = requestCtx.blob\n                ? 'blob:' + location.origin + requestCtx.url.pathname\n                : requestCtx.url;\n\n            const response = await this.bareClient.fetch(fetchedURL, {\n                headers: requestCtx.headers,\n                method: requestCtx.method,\n                body: requestCtx.body,\n                credentials: requestCtx.credentials,\n                mode:\n                    location.origin !== requestCtx.address.origin\n                        ? 'cors'\n                        : requestCtx.mode,\n                cache: requestCtx.cache,\n                redirect: requestCtx.redirect,\n            });\n\n            const responseCtx = new ResponseContext(requestCtx, response);\n            const resEvent = new HookEvent(responseCtx, null, null);\n\n            this.emit('beforemod', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            for (const name of cspHeaders) {\n                if (responseCtx.headers[name]) delete responseCtx.headers[name];\n            }\n\n            if (responseCtx.headers.location) {\n                responseCtx.headers.location = ultraviolet.rewriteUrl(\n                    responseCtx.headers.location\n                );\n            }\n\n            // downloads\n            if (request.destination === 'document') {\n                const header = responseCtx.headers['content-disposition'];\n\n                // validate header and test for filename\n                if (!/\\s*?((inline|attachment);\\s*?)filename=/i.test(header)) {\n                    // if filename= wasn't specified then maybe the remote specified to download this as an attachment?\n                    // if it's invalid then we can still possibly test for the attachment/inline type\n                    const type = /^\\s*?attachment/i.test(header)\n                        ? 'attachment'\n                        : 'inline';\n\n                    // set the filename\n                    const [filename] = new URL(response.finalURL).pathname\n                        .split('/')\n                        .slice(-1);\n\n                    responseCtx.headers[\n                        'content-disposition'\n                    ] = `${type}; filename=${JSON.stringify(filename)}`;\n                }\n            }\n\n            if (responseCtx.headers['set-cookie']) {\n                Promise.resolve(\n                    ultraviolet.cookie.setCookies(\n                        responseCtx.headers['set-cookie'],\n                        db,\n                        ultraviolet.meta\n                    )\n                ).then(() => {\n                    self.clients.matchAll().then(function (clients) {\n                        clients.forEach(function (client) {\n                            client.postMessage({\n                                msg: 'updateCookies',\n                                url: ultraviolet.meta.url.href,\n                            });\n                        });\n                    });\n                });\n                delete responseCtx.headers['set-cookie'];\n            }\n\n            if (responseCtx.body) {\n                switch (request.destination) {\n                    case 'script':\n                    case 'worker':\n                        {\n                            // craft a JS-safe list of arguments\n                            const scripts = [\n                                ultraviolet.bundleScript,\n                                ultraviolet.clientScript,\n                                ultraviolet.configScript,\n                                ultraviolet.handlerScript,\n                            ]\n                                .map((script) => JSON.stringify(script))\n                                .join(',');\n                            responseCtx.body = `if (!self.__uv && self.importScripts) { ${ultraviolet.createJsInject(\n                                this.address,\n                                this.bareClient.manifest,\n                                ultraviolet.cookie.serialize(\n                                    cookies,\n                                    ultraviolet.meta,\n                                    true\n                                ),\n                                request.referrer\n                            )} importScripts(${scripts}); }\\n`;\n                            responseCtx.body += ultraviolet.js.rewrite(\n                                await response.text()\n                            );\n                        }\n                        break;\n                    case 'style':\n                        responseCtx.body = ultraviolet.rewriteCSS(\n                            await response.text()\n                        );\n                        break;\n                    case 'iframe':\n                    case 'document':\n                        if (\n                            isHtml(\n                                ultraviolet.meta.url,\n                                responseCtx.headers['content-type'] || ''\n                            )\n                        ) {\n                            responseCtx.body = ultraviolet.rewriteHtml(\n                                await response.text(),\n                                {\n                                    document: true,\n                                    injectHead: ultraviolet.createHtmlInject(\n                                        ultraviolet.handlerScript,\n                                        ultraviolet.bundleScript,\n                                        ultraviolet.clientScript,\n                                        ultraviolet.configScript,\n                                        this.address,\n                                        this.bareClient.manifest,\n                                        ultraviolet.cookie.serialize(\n                                            cookies,\n                                            ultraviolet.meta,\n                                            true\n                                        ),\n                                        request.referrer\n                                    ),\n                                }\n                            );\n                        }\n                }\n            }\n\n            if (requestCtx.headers.accept === 'text/event-stream') {\n                responseCtx.headers['content-type'] = 'text/event-stream';\n            }\n            if (crossOriginIsolated) {\n                responseCtx.headers['Cross-Origin-Embedder-Policy'] =\n                    'require-corp';\n            }\n\n            this.emit('response', resEvent);\n            if (resEvent.intercepted) return resEvent.returnValue;\n\n            return new Response(responseCtx.body, {\n                headers: responseCtx.headers,\n                status: responseCtx.status,\n                statusText: responseCtx.statusText,\n            });\n        } catch (err) {\n            if (!['document', 'iframe'].includes(request.destination))\n                return new Response(undefined, { status: 500 });\n\n            console.error(err);\n\n            return renderError(err, fetchedURL, this.address);\n        }\n    }\n    static Ultraviolet = Ultraviolet;\n}\n\nself.UVServiceWorker = UVServiceWorker;\n\nclass ResponseContext {\n    /**\n     *\n     * @param {RequestContext} request\n     * @param {import(\"@tomphttp/bare-client\").BareResponseFetch} response\n     */\n    constructor(request, response) {\n        this.request = request;\n        this.raw = response;\n        this.ultraviolet = request.ultraviolet;\n        this.headers = {};\n        // eg set-cookie\n        for (const key in response.rawHeaders)\n            this.headers[key.toLowerCase()] = response.rawHeaders[key];\n        this.status = response.status;\n        this.statusText = response.statusText;\n        this.body = response.body;\n    }\n    get url() {\n        return this.request.url;\n    }\n    get base() {\n        return this.request.base;\n    }\n    set base(val) {\n        this.request.base = val;\n    }\n}\n\nclass RequestContext {\n    /**\n     *\n     * @param {Request} request\n     * @param {UVServiceWorker} worker\n     * @param {Ultraviolet} ultraviolet\n     * @param {BodyInit} body\n     */\n    constructor(request, worker, ultraviolet, body = null) {\n        this.ultraviolet = ultraviolet;\n        this.request = request;\n        this.headers = Object.fromEntries(request.headers.entries());\n        this.method = request.method;\n        this.address = worker.address;\n        this.body = body || null;\n        this.cache = request.cache;\n        this.redirect = request.redirect;\n        this.credentials = 'omit';\n        this.mode = request.mode === 'cors' ? request.mode : 'same-origin';\n        this.blob = false;\n    }\n    get url() {\n        return this.ultraviolet.meta.url;\n    }\n    set url(val) {\n        this.ultraviolet.meta.url = val;\n    }\n    get base() {\n        return this.ultraviolet.meta.base;\n    }\n    set base(val) {\n        this.ultraviolet.meta.base = val;\n    }\n}\n\nfunction isHtml(url, contentType = '') {\n    return (\n        (\n            Ultraviolet.mime.contentType(contentType || url.pathname) ||\n            'text/html'\n        ).split(';')[0] === 'text/html'\n    );\n}\n\nclass HookEvent {\n    #intercepted;\n    #returnValue;\n    constructor(data = {}, target = null, that = null) {\n        this.#intercepted = false;\n        this.#returnValue = null;\n        this.data = data;\n        this.target = target;\n        this.that = that;\n    }\n    get intercepted() {\n        return this.#intercepted;\n    }\n    get returnValue() {\n        return this.#returnValue;\n    }\n    respondWith(input) {\n        this.#returnValue = input;\n        this.#intercepted = true;\n    }\n}\n\n/**\n *\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction hostnameErrorTemplate(fetchedURL, bareServer) {\n    const parsedFetchedURL = new URL(fetchedURL);\n    const script =\n        `remoteHostname.textContent = ${JSON.stringify(\n            parsedFetchedURL.hostname\n        )};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `uvHostname.textContent = ${JSON.stringify(location.hostname)};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        '<h1>This site can\u2019t be reached</h1>' +\n        '<hr />' +\n        '<p><b id=\"remoteHostname\"></b>\u2019s server IP address could not be found.</p>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verifying the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n *\n * @param {string} title\n * @param {string} code\n * @param {string} id\n * @param {string} message\n * @param {string} trace\n * @param {string} fetchedURL\n * @param {string} bareServer\n * @returns\n */\nfunction errorTemplate(\n    title,\n    code,\n    id,\n    message,\n    trace,\n    fetchedURL,\n    bareServer\n) {\n    // produced by bare-server-node\n    if (message === 'The specified host could not be resolved.')\n        return hostnameErrorTemplate(fetchedURL, bareServer);\n\n    // turn script into a data URI so we don't have to escape any HTML values\n    const script =\n        `errorTitle.textContent = ${JSON.stringify(title)};` +\n        `errorCode.textContent = ${JSON.stringify(code)};` +\n        (id ? `errorId.textContent = ${JSON.stringify(id)};` : '') +\n        `errorMessage.textContent =  ${JSON.stringify(message)};` +\n        `errorTrace.value = ${JSON.stringify(trace)};` +\n        `fetchedURL.textContent = ${JSON.stringify(fetchedURL)};` +\n        `bareServer.href = ${JSON.stringify(bareServer)};` +\n        `for (const node of document.querySelectorAll(\"#uvHostname\")) node.textContent = ${JSON.stringify(\n            location.hostname\n        )};` +\n        `reload.addEventListener(\"click\", () => location.reload());` +\n        `uvVersion.textContent = ${JSON.stringify(\n            process.env.ULTRAVIOLET_VERSION\n        )};`;\n\n    return (\n        '<!DOCTYPE html>' +\n        '<html>' +\n        '<head>' +\n        \"<meta charset='utf-8' />\" +\n        '<title>Error</title>' +\n        '</head>' +\n        '<body>' +\n        \"<h1 id='errorTitle'></h1>\" +\n        '<hr />' +\n        '<p>Failed to load <b id=\"fetchedURL\"></b></p>' +\n        '<p id=\"errorMessage\"></p>' +\n        '<table><tbody>' +\n        '<tr><td>Code:</td><td id=\"errorCode\"></td></tr>' +\n        (id ? '<tr><td>ID:</td><td id=\"errorId\"></td></tr>' : '') +\n        '</tbody></table>' +\n        '<textarea id=\"errorTrace\" cols=\"40\" rows=\"10\" readonly></textarea>' +\n        '<p>Try:</p>' +\n        '<ul>' +\n        '<li>Checking your internet connection</li>' +\n        '<li>Verifying you entered the correct address</li>' +\n        '<li>Clearing the site data</li>' +\n        '<li>Contacting <b id=\"uvHostname\"></b>\\'s administrator</li>' +\n        \"<li>Verify the <a id='bareServer' title='Bare server'>Bare server</a> isn't censored</li>\" +\n        '</ul>' +\n        '<p>If you\\'re the administrator of <b id=\"uvHostname\"></b>, try:</p>' +\n        '<ul>' +\n        '<li>Restarting your Bare server</li>' +\n        '<li>Updating Ultraviolet</li>' +\n        '<li>Troubleshooting the error on the <a href=\"https://github.com/titaniumnetwork-dev/Ultraviolet\" target=\"_blank\">GitHub repository</a></li>' +\n        '</ul>' +\n        '<button id=\"reload\">Reload</button>' +\n        '<hr />' +\n        '<p><i>Ultraviolet v<span id=\"uvVersion\"></span></i></p>' +\n        `<script src=\"${\n            'data:application/javascript,' + encodeURIComponent(script)\n        }\"></script>` +\n        '</body>' +\n        '</html>'\n    );\n}\n\n/**\n * @typedef {import(\"@tomphttp/bare-client\").BareError} BareError\n */\n\n/**\n *\n * @param {unknown} err\n * @returns {err is BareError}\n */\nfunction isBareError(err) {\n    return err instanceof Error && typeof err.body === 'object';\n}\n\n/**\n *\n * @param {unknown} err\n * @param {string} fetchedURL\n * @param {string} bareServer\n */\nfunction renderError(err, fetchedURL, bareServer) {\n    /**\n     * @type {number}\n     */\n    let status;\n    /**\n     * @type {string}\n     */\n    let title;\n    /**\n     * @type {string}\n     */\n    let code;\n    let id = '';\n    /**\n     * @type {string}\n     */\n    let message;\n\n    if (isBareError(err)) {\n        status = err.status;\n        title = 'Error communicating with the Bare server';\n        message = err.body.message;\n        code = err.body.code;\n        id = err.body.id;\n    } else {\n        status = 500;\n        title = 'Error processing your request';\n        message = 'Internal Server Error';\n        code = err instanceof Error ? err.name : 'UNKNOWN';\n    }\n\n    return new Response(\n        errorTemplate(\n            title,\n            code,\n            id,\n            message,\n            String(err),\n            fetchedURL,\n            bareServer\n        ),\n        {\n            status,\n            headers: {\n                'content-type': 'text/html',\n            },\n        }\n    );\n}\n"],
  "mappings": "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",
  "names": ["Ultraviolet", "cspHeaders", "emptyMethods", "UVServiceWorker", "config", "addresses", "str", "request", "fetchedURL", "ultraviolet", "db", "requestCtx", "RequestContext", "referer", "cookies", "cookieStr", "reqEvent", "HookEvent", "response", "responseCtx", "ResponseContext", "resEvent", "name", "header", "type", "filename", "clients", "client", "scripts", "script", "isHtml", "err", "renderError", "key", "val", "worker", "body", "url", "contentType", "#intercepted", "#returnValue", "data", "target", "that", "input", "hostnameErrorTemplate", "bareServer", "parsedFetchedURL", "errorTemplate", "title", "code", "id", "message", "trace", "isBareError", "status"]
}
